<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>node_require</title>
      <link href="2021/01/05/node-require/"/>
      <url>2021/01/05/node-require/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vm'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Module<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>load <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> extName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Module<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    absPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">resolveFilename</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>absPath<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>absPath<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从缓存中返回对象</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>absPath<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>resolveFilename <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路径解析</span>    <span class="token keyword">let</span> absPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> absPath<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Module<span class="token punctuation">.</span>extensions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>absPath <span class="token operator">+</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                current <span class="token operator">=</span> absPath <span class="token operator">+</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"该文件不存在"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> current<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Module<span class="token punctuation">.</span>extensions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">".json"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> json <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">".js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> script <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fnStr <span class="token operator">=</span> Module<span class="token punctuation">.</span>warpper<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> script <span class="token operator">+</span> Module<span class="token punctuation">.</span>warpper<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fn <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInThisContext</span><span class="token punctuation">(</span>fnStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Module<span class="token punctuation">.</span>warpper <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'(function(module,exports,_filename,_dirname)&amp;#123;'</span><span class="token punctuation">,</span>    <span class="token string">'&amp;#125;)'</span><span class="token punctuation">]</span>Module<span class="token punctuation">.</span>_cache <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">req</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">req</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*req模块    传入相对路径=》绝对路径    后缀名分析（先进行原路径解析=》添加json后缀解析=》添加js后缀解析）    实例化Module,调用load方法    load:判断文件后后缀名调用对应的函数*/</span></code></pre><ol><li><p>node .js 中内置有fs,vm,require等模块。</p></li><li><p>node端全局文件里的this指向moudle.exports</p></li><li><p>node端不存在window对象，可以访问golobal对象</p></li><li><p>获取去命令行参数 process.argv.slice(2)</p></li><li><p>process.cwd()获取当前文件绝对路径</p></li><li><p>commander 命令行管家</p></li><li><p>chalk 粉笔工具，是命令行显示拥有颜色</p></li><li><p>事件循环机制，主线任务=&gt;timer队列=》pool队列(I/0操作，文件操作)=》setImmediate队列，每次宏任务执行都清空微任务列表，settimeout,setInterval,文件读取，setImmediate都是宏任务 ，promise.then,nextick(优先级高于then)是微任务，</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试1答案</title>
      <link href="2020/10/03/%E9%9D%A2%E8%AF%951%E7%AD%94%E6%A1%88/"/>
      <url>2020/10/03/%E9%9D%A2%E8%AF%951%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h5 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h5><h5 id="1-1基础题"><a href="#1-1基础题" class="headerlink" title="1.1基础题"></a>1.1基础题</h5><ol><li><h6 id="计算机硬件结构包含几部分？软件结构呢？"><a href="#计算机硬件结构包含几部分？软件结构呢？" class="headerlink" title="计算机硬件结构包含几部分？软件结构呢？"></a>计算机硬件结构包含几部分？软件结构呢？</h6><p>计算机硬件一般包括计算器、控制器、存储器、输入设备、输出设备</p><p>中央处理器（cpu）=计算器+控制器</p><p>主机=中央处理器+主存储设备</p><p>计算机软件系统由系统软件和应用软件组成<br>系统软件：1.操作系统   2.语言处理系统  3.数据库管理系统<br>应用软件：指的是为解决某个应用领域中的具体任务而编制的程序</p></li><li><p>-256在计算机中如何存储？</p><p>在计算机中数字是以补码的形式存储，补码对于正整数而言就是他的源码，对于负整数就是除符号为外的所有二进制数取反+1.</p><p>小数的存储形式：flaot:32 =符号位(1)+指数位(8)+底数(23)</p><p>​                                double64:=符号位(1)+指数位(13)+底数(52)</p></li><li><p>数据库的本质是什么？</p><p>一张二位表</p></li><li><p>什么是TCP/IP协议？有什么优点？</p><p>TCP/IP协议是网络控制协议/英特网互联协议，是各种协议的集合体。有以下四个特点：</p><p>​    1.协议标准是完全开放的，并且独立于特定的计算机硬件和操作系统</p><p>​    2.独立于网络硬件系统，可运用于广域网，更适用于互联网</p><p>​    3.网络地址统一分配，网络中的每一台主机以及终端都具有唯一的ip地址</p><p>​    4.高成协议标准化，可提供多种多样的网络服务。</p></li><li><p>传输邮件的协议是什么？</p><p>SMTP</p></li><li><p>应你熟悉的语言实现生成1000个随机数，并从小到大排序</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pre<span class="token operator">-</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="7"><li><p>一个程序通过什么步骤可以运行</p><p>c语言</p><ol><li>编辑</li><li>编译</li><li>链接</li><li>生成可执行文件</li></ol></li></ol><h5 id="1-2选做题"><a href="#1-2选做题" class="headerlink" title="1.2选做题"></a>1.2选做题</h5><ol><li>有100万张照片，像素是1920*1080。请问如何找出相似的100张图片</li><li>将N个学生排列成一行，老师根据学生的表现进行打分，要求相邻最高分的学生获得的苹果数最多，每个学生至少获得一个。</li></ol><pre><code>输入：[1,0,2]输出：5 function fn(scoreArr) &#123;        var counterArr = [];//存储分配苹果数        var result;        for (var i = 1; i &lt; scoreArr.length; i++) &#123;            if (scoreArr[i] &gt; scoreArr[i - 1]) &#123;//两两比较，后者大于前者，在前者基础上+1                if (i == 1) &#123;                    counterArr[i] = 2;                    counterArr[i - 1] = 1;                &#125; else &#123;                    counterArr[i] = counterArr[i - 1] + 1;                &#125;            &#125;            if (scoreArr[i] &lt; scoreArr[i - 1]) &#123;\\前者大于后者（该分配的对象），判断若前者的counterArr值是否为1,若为1折将所有大于后者的数+1，接着后者（该分配的对象）置于1.                if (i == 1) &#123;                    counterArr[i] = 1;                    counterArr[i - 1] = 2;                &#125; else if (counterArr[i - 1] == 1) &#123;                    counterArr[i - 1]++;                    for (var j = 0; j &lt; counterArr.length - 1; j++) &#123;                        console.log(j)                        if (scoreArr[j] &gt; scoreArr[j + 1] &amp;&amp; j &lt; counterArr.length - 1) &#123;                            counterArr[j]++;                        &#125;                    &#125;                &#125;                counterArr[counterArr.length] = 1;            &#125;            if (scoreArr[i] == scoreArr[i - 1]) &#123;                if (i == 1) &#123;                    counterArr[i] = 1;                    counterArr[i - 1] = 1;                &#125; else &#123;                    counterArr[i] = counterArr[i - 1];                &#125;            &#125;        &#125;       result = counterArr.reduce(function(prevalue,item)&#123;//计算累计数            return prevalue+item;        &#125;)        return result;    &#125;</code></pre><h5 id="1-3javascript基础"><a href="#1-3javascript基础" class="headerlink" title="1.3javascript基础"></a>1.3javascript基础</h5><ol><li>常用的HTML5标签？</li><li>块级元素有哪些？</li><li>行级元素有哪些？</li><li>哪些属性可以继承？</li></ol><ul><li>color/font-/,text-/line-/开头的元素</li><li>a标签的颜色和下划线是不能够继承的</li><li>h标签的文字大小不能够被继承</li></ul><ol><li><p>local Storage和cookies以及session storage的区别</p><p>共同点：都是保存在浏览器端、且同源的<br>区别：<br>1、cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>2、存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大<br>3、数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭<br>4、作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的<br>5、web Storage支持事件通知机制，可以将数据更新的通知发送给监听者<br>6、web Storage的api接口使用更方便</p></li><li><p>HTTP的作用是什么？HTTP和HTTPS的区别是什么？</p></li><li><p>什么事实闭包？</p></li><li><p>在url上输入一个地址到渲染出界面经过了怎样的过程？</p><p>DNS域名解析——》建立TCP链接——》发送请求报文——》发送响应报文——》断开连接——》界面渲染</p></li><li><p>实现数组去重</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="6"><li>使用三种方法实现垂直水平居中</li></ol><ol start="7"><li>获取两个数组的交集、并集以及差集</li></ol><ol><li><p>匿名函数和声明函数的区别</p><p>匿名函数立即执行，声明函数需要自己调用</p></li><li><p>什么是回调函数</p><p>将函数作为参数传递给函数</p></li><li><p>promise是异步执行的么？then呢？</p><p>promise是同步，then是异步</p></li><li><p>清除浮动的方法？为什么要清除浮动？</p><p>创建BFC元素，一般使用</p><p>.clear:after{</p><p>height:0;</p><p>content: “”;</p><p>display:block;//将文本转为块级元素</p><p>visibility:hidden;</p><p>clear:both;</p><p>}</p></li><li><p>什么是伸缩布局？应用在哪些场景</p><p>伸缩布局及弹性布局</p></li><li><p>position的属性值有哪些？</p><p>absolute、realitive、fixed、static</p></li><li><p>什么是跨域？如何解决跨域？</p><p>向不同域的网站发送http请求叫做跨域。这是浏览器的同源政策。可以通过JSONP和设置代理解决</p></li><li><p>状态码有哪些？具体的意义有什么？</p><p>304：请求资源未更新</p><p>200：请求成功</p><p>404：未找到</p><p>400：请求错误</p></li><li><p>什么是盒子模型?</p></li></ol><h5 id="1-4vue基础"><a href="#1-4vue基础" class="headerlink" title="1.4vue基础"></a>1.4vue基础</h5><ol><li><p>vue的生命周期函数</p></li><li><p>v-show和v-if的区别</p></li><li><p>vue-router的原理</p></li><li><p>v-if和v-for的优先级</p><p>：v-for比v-if优先</p></li><li><p>solt是什么？有什么作用？</p></li><li><p>实现一个vue递归组件</p></li><li><p>vuex是什么？有什么用</p></li><li><p>简述mvvm模型</p></li><li><p>foreach、for……in……、for……of……的区别</p></li><li><p>let、const、var的区别</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题1</title>
      <link href="2020/10/01/%E9%9D%A2%E8%AF%95%E9%A2%981/"/>
      <url>2020/10/01/%E9%9D%A2%E8%AF%95%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h4 id="一、总结"><a href="#一、总结" class="headerlink" title="一、总结"></a>一、总结</h4><p>本次面试题包括计算机基础，js原生、vue.其中计算机基础中计算机网络占据主导地位。</p><h4 id="二、面试题"><a href="#二、面试题" class="headerlink" title="二、面试题"></a>二、面试题</h4><h5 id="1-1基础题"><a href="#1-1基础题" class="headerlink" title="1.1基础题"></a>1.1基础题</h5><ol><li>计算机硬件结构包含几部分？软件结构呢？</li><li>-256在计算机中如何存储？</li><li>数据库的本质结构是什么？</li><li>什么是TCP/IP协议？有什么优点？</li><li>传输邮件的协议是什么？</li><li>应你熟悉的语言实现生成1000个随机数，并从小到大排序</li><li>一个程序通过什么步骤可以运行</li><li>数据库的本质是什么</li></ol><h5 id="1-2选做题"><a href="#1-2选做题" class="headerlink" title="1.2选做题"></a>1.2选做题</h5><ol><li>有100万张照片，像素是1920*1080。请问如何找出相似的100张图片</li><li>将N个学生排列成一行，老师根据学生的表现进行打分，要求相邻最高分的学生获得的苹果数最多，每个学生至少获得一个。</li></ol><pre><code>输入：[1,0,2]输出：5</code></pre><h5 id="1-3javascript基础"><a href="#1-3javascript基础" class="headerlink" title="1.3javascript基础"></a>1.3javascript基础</h5><ol><li>常用的HTML5标签？</li><li>块级元素有哪些？</li><li>行级元素有哪些？</li><li>哪些属性可以继承？</li><li>local Storage和cookies以及session storage的区别</li><li>HTTP的作用是什么？HTTP和HTTPS的区别是什么？</li><li>什么事实闭包？</li><li>在url上输入一个地址到渲染出界面经过了怎样的过程？</li><li>实现数组去重</li><li>使用三种方法实现垂直水平居中</li><li>获取两个数组的交集、并集以及差集</li><li>匿名函数和声明函数的区别</li><li>什么是回掉函数</li><li>promise是异步执行的么？then呢？</li><li>清除浮动的方法？为什么要清除浮动？</li><li>什么是伸缩布局？应用在哪些场景</li><li>position的属性值有哪些？</li><li>什么是跨域？如何解决跨域？</li><li>状态码有哪些？具体的意义有什么？</li><li>什么是盒子模型?</li></ol><h5 id="1-4vue基础"><a href="#1-4vue基础" class="headerlink" title="1.4vue基础"></a>1.4vue基础</h5><ol><li>vue的生命周期函数</li><li>v-show和v-if的区别</li><li>vue-router的原理</li><li>v-if和v-for的优先级</li><li>solt是什么？有什么作用？</li><li>实现一个vue递归组件</li><li>vuex是什么？有什么用</li><li>简述mvvm模型</li><li>foreach、for……in……、for……of……的区别</li><li>let、const、var的区别</li></ol><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>​    很多东西不熟悉，在面试时频频出错，学习是不要贪多，应要理解，所有的框架都源于原生，打好原生基础在今后的学习中会有很大的进步。企业中有有很多新型的技术不会有老师系统的讲解，需要建立一套字节的学习方法，以上是第一次面试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/09/27/jquery%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>2020/09/27/jquery%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h5><table><thead><tr><th>静态函数</th><th>功能</th></tr></thead><tbody><tr><td>each</td><td>遍历所有元素可遍历数组、伪数组、对象</td></tr><tr><td>map</td><td>和原生js使用相同，但原生只能遍历数组，该函数可遍历数组、伪数组、对象</td></tr><tr><td>trim</td><td>去除字符串两端的空格</td></tr><tr><td>holdReady</td><td>暂停ready执行</td></tr></tbody></table><h5 id="jquery入口函数说明"><a href="#jquery入口函数说明" class="headerlink" title="jquery入口函数说明"></a>jquery入口函数说明</h5><ul><li>原生js onload函数会在dom树加载完后并且所有的图片资源加载完成才会执行</li><li>jquery入口函数ready在dom加载完成后就会执行</li></ul><h5 id="内容选择器"><a href="#内容选择器" class="headerlink" title="内容选择器"></a>内容选择器</h5><table><thead><tr><th>选择器</th><th>功能</th></tr></thead><tbody><tr><td>$(“div:empty”)</td><td>找到既没有文本内容也没有子元素的指定元素</td></tr><tr><td>$(“div:parent”)</td><td>找到有文本内容或有子元素的指定元素</td></tr><tr><td>$(“div:contains(‘我是div’)”)</td><td>找到包含指定文本内容的指定元素</td></tr><tr><td>$(“div:has(‘span’)”)</td><td>找到包含指定子元素的指定元素</td></tr></tbody></table><h5 id="jquery方法"><a href="#jquery方法" class="headerlink" title="jquery方法"></a>jquery方法</h5><table><thead><tr><th>方法</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>prop（）</td><td>获取或改变属性值、属性节点值</td><td></td></tr><tr><td>removeProp（）</td><td>移除属性</td><td></td></tr><tr><td>attr()</td><td>获取属性节点值</td><td></td></tr><tr><td>removeAttr()</td><td>移除属性</td><td>prop()获取属性select、check、disable等属性节点时返回true OR false,attr返回selected……</td></tr><tr><td>类操作方法</td><td></td><td></td></tr><tr><td>addClass()</td><td>添加class</td><td></td></tr><tr><td>removeClass()</td><td>移除class</td><td></td></tr><tr><td>toggleClass()</td><td>添加或删除class</td><td>若写入的参数为存在的class则去除该class,不存在就添加</td></tr><tr><td>html()</td><td>和原生innerHtml相同</td><td></td></tr><tr><td>text()</td><td>和原生innerText相同</td><td></td></tr><tr><td>val()</td><td>获取value的值</td><td></td></tr><tr><td>css()</td><td>改变css样式</td><td></td></tr><tr><td>offset（）</td><td>获取元素距离窗口的偏移位</td><td>可以设置偏移</td></tr><tr><td>position</td><td>获取元素距离定位元素的偏移位</td><td>position方法只能获取不能设置</td></tr><tr><td>scrollTop</td><td>获得滚动偏移</td><td></td></tr><tr><td>off()</td><td>移除事件</td><td>off方法如果不传递参数, 会移除所有的事件  \n off方法如果传递一个参数, 会移除所有指定类型的事件 \n  off方法如果传递两个参数, 会移除所有指定类型的指定事件</td></tr><tr><td>trigger()</td><td>主动触发事件</td><td>会触发事件冒泡</td></tr><tr><td>triggerHandler()</td><td>主动触发事件</td><td>不会触发事件冒泡</td></tr><tr><td>delegate</td><td>事件委托</td><td></td></tr><tr><td>mouseover</td><td>移入</td><td>触发父元素事件</td></tr><tr><td>mouseout</td><td>移出</td><td>触发父元素事件</td></tr><tr><td>mousleave</td><td>移出</td><td>不触发父元素事件</td></tr><tr><td>mousenter</td><td>移入</td><td>不触发父元素事件</td></tr><tr><td>remove([expr])</td><td>删除指定元素</td><td>利用remove删除之后再重新添加,原有的事件无法响应</td></tr><tr><td>empty()</td><td>删除指定元素的内容和子元素, 指定元素自身不会被删除</td><td></td></tr><tr><td>detach([expr])</td><td></td><td>利用detach删除之后再重新添加,原有事件可以响应</td></tr><tr><td>replaceWith(content</td><td></td><td>$(“h1”).replaceWith($h6);</td></tr><tr><td>replaceAll(selector)</td><td></td><td>$h6.replaceAll(“h1”)</td></tr><tr><td>clone</td><td>克隆元素</td><td>false浅克隆 true 深克隆</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css选择器</title>
      <link href="2020/09/25/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>2020/09/25/css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h5 id=""><a href="#" class="headerlink" title=""></a></h5><table><thead><tr><th>选择器</th><th>功能</th></tr></thead><tbody><tr><td>选择器1~选择器2</td><td>相邻兄弟选择器只能选中紧跟其后的那个标签, 不能选中被隔开的标签</td></tr><tr><td>选择器1~选择器2</td><td>通用兄弟选择器选中的是指定选择器后面某个选择器选中的所有标签, 无论有没有被隔开都可以选中</td></tr><tr><td>first-child</td><td>选中同级别中的第一个标签</td></tr><tr><td>last-child</td><td>选中同级别中的最后一个标签</td></tr><tr><td>nth-child(n)</td><td>选中同级别中的第n个标签</td></tr><tr><td>:nth-last-child(n)</td><td>选中同级别中的倒数第n个标签</td></tr><tr><td>:only-child</td><td>选中父元素中唯一的标签</td></tr><tr><td>:first-of-type</td><td>选中同级别中同类型的第一个标签</td></tr><tr><td>:last-of-type</td><td>选中同级别中同类型的最后一个标签</td></tr><tr><td>:nth-of-type(n)</td><td>选中同级别中同类型的第n个标签</td></tr><tr><td>:nth-last-of-type(n)</td><td>选中同级别中同类型的倒数第n个标签</td></tr><tr><td>:only-of-type</td><td>选中父元素中唯一类型的某个标签</td></tr><tr><td>nth-child(odd)</td><td>选中同级别中的所有奇数</td></tr><tr><td>:nth-child(even)</td><td>选中同级别中的所有偶数</td></tr><tr><td>:nth-child(xn+y)</td><td>x和y是用户自定义的, 而n是一个计数器, 从0开始递增</td></tr><tr><td>[attribute=value]</td><td>找到有指定属性, 并且属性的取值等于value的标签, 然后设置属性</td></tr><tr><td>[attribute|=value] CSS2</td><td>CSS2中的只能找到value开头,并且value是被-和其它内容隔开的</td></tr><tr><td>[attribute^=value] CSS3</td><td>CSS3中的只要是以value开头的都可以找到, 无论有没有被-隔开</td></tr><tr><td>[attribute$=value] CSS3</td><td>属性以value值结尾</td></tr><tr><td>[attribute~=value] CSS2</td><td>CSS2中的只能找到独立的单词, 也就是包含value,并且value是被空格隔开的</td></tr><tr><td>[attribute*=value] CSS3</td><td>CSS3中的只要包含value就可以找到</td></tr><tr><td>*</td><td>匹配所有</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站资源</title>
      <link href="2020/09/24/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/"/>
      <url>2020/09/24/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h5 id="字体库"><a href="#字体库" class="headerlink" title="字体库"></a>字体库</h5><ul><li><a href="https://icomoon.io/app/">https://icomoon.io/app/</a></li><li><a href="https://www.fontsquirrel.com/">https://www.fontsquirrel.com</a></li><li><a href="https://www.google.com/fonts/">https://www.google.com/fonts/</a></li></ul><h5 id="js控件"><a href="#js控件" class="headerlink" title="js控件"></a>js控件</h5><ul><li>时间格式化控件 moment</li><li>短信验证码 容联 云通讯</li><li>拦截ajax请求 mockjs</li><li>外卖组件 elementui</li><li>滚动条 bestscroll</li></ul><p>操作系统</p><p>​    <a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><h5 id="清除网页默认CSS样式"><a href="#清除网页默认CSS样式" class="headerlink" title="清除网页默认CSS样式"></a>清除网页默认CSS样式</h5><p><a href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css">http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript</title>
      <link href="2020/09/22/javaScript/"/>
      <url>2020/09/22/javaScript/</url>
      
        <content type="html"><![CDATA[<h5 id="浏览器不支持H5的解决办法"><a href="#浏览器不支持H5的解决办法" class="headerlink" title="浏览器不支持H5的解决办法"></a>浏览器不支持H5的解决办法</h5><p>通过一个JS的框架叫做html5media来实现</p><h5 id="a标签锚点之一事项"><a href="#a标签锚点之一事项" class="headerlink" title="a标签锚点之一事项"></a>a标签锚点之一事项</h5><p>使用name作为锚点时标签必须是a标签，若过是id作为锚点则可以是任何标签</p><h5 id="vide标签一些说明"><a href="#vide标签一些说明" class="headerlink" title="vide标签一些说明"></a>vide标签一些说明</h5><p>src: 用于告诉video标签需要播放的视频地址<br>autoplay: 用于告诉video标签是否需要自动播放视频<br>controls: 用于告诉video标签是否需要显示控制条<br>poster: 用于告诉video标签视频没有播放之前显示的占位图片<br>loop: 一般用于做广告视频, 用于告诉video标签视频播放完毕之后是否需要循环播放<br>preload: 预加载视频, 但是需要注意preload和autoplay相冲, 如果设置了autoplay属性, 那么preload属性就会失效<br>muted:静音<br>width/height: 和img标签中的一模一样</p><p>每一家浏览器都只支持自己的video标签，于是w3c在H5中体统一种video的标注使用方法。</p><h5 id="详细和概要标签"><a href="#详细和概要标签" class="headerlink" title="详细和概要标签"></a>详细和概要标签</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>details<span class="token operator">></span>    <span class="token operator">&lt;</span>summary<span class="token operator">></span>郑伊健<span class="token operator">&lt;</span><span class="token operator">/</span>summary<span class="token operator">></span>简介：郑伊健，<span class="token number">1967</span>年<span class="token number">10</span>月<span class="token number">4</span>日出生于中国香港，籍贯广东恩平，香港影视演员、流行男歌手。<span class="token number">1988</span>年参加新秀歌唱大赛加入无线电视，因拍摄“阳光柠檬茶”广告而入行，拜罗文为师。<span class="token number">1991</span>年<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>details<span class="token operator">></span></code></pre><h5 id="跑马灯标签"><a href="#跑马灯标签" class="headerlink" title="跑马灯标签"></a>跑马灯标签</h5><pre><code>&lt;!--1.什么是marquee标签?作用: 跑马灯格式:&lt;marquee&gt;内容&lt;/marquee&gt;属性:direction: 设置滚动方向 left/right/up/downscrollamount: 设置滚动速度, 值越大就越快loop: 设置滚动次数, 默认是-1, 也就是无限滚动behavior: 设置滚动类型 slide滚动到边界就停止, alternate滚动到边界就弹回注意点:marquee标签不是W3C推荐的标签, 在W3C官方文档中也无法查询这个标签, 但是各大浏览器对这个标签的支持非常好--&gt;</code></pre><h5 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h5><p>2.什么是字符实体?<br>在HTML中有的字符是被HTML保留的, 有的HTML字符在HTML中是有特殊含义的, 是不能在浏览器中直接显示出来的, 那么这些东西要想显示出来就必须通过字符实体</p><p>&nbsp; 空格, 一个&nbsp;就是一个空格, 有多少个&nbsp;就有多少个空格<br>&lt; 小于符号 &lt;<br>(less than)<br>&gt; 大于符号 &gt;<br>(greater than)<br>&copy; 版权符号<br>–&gt;</p><h5 id="DOCTYP说明"><a href="#DOCTYP说明" class="headerlink" title="DOCTYP说明"></a>DOCTYP说明</h5><p>文档类型声明：分为严格模式和混杂模式，</p><p>严格模式是以当前浏览器支持的最高标准惊醒页面渲染和js执行。</p><p>混杂模式：向下兼容，主要用来兼容一些老版本的浏览器</p><h5 id="css选择器说明"><a href="#css选择器说明" class="headerlink" title="css选择器说明"></a>css选择器说明</h5><h5 id="css属性继承"><a href="#css属性继承" class="headerlink" title="css属性继承"></a>css属性继承</h5><p>css在属性上一些样式会被子元素以及孙子元素所继承。</p><ul><li>color/font-/,text-/line-/开头的元素</li><li>a标签的颜色和下划线是不能够继承的</li><li>h标签的文字大小不能够被继承</li></ul><p>CSS简写</p><table><thead><tr><th>简写</th><th>额外说明</th></tr></thead><tbody><tr><td>background: 背景颜色 背景图片 平铺方式 关联方式 定位方式;</td><td>背景关联方式：background-attachment:  scroll 默认值， 会随着滚动条的滚动而滚动  fixed 不会随着滚动条的滚动而滚动</td></tr><tr><td>transition: 过渡属性 过渡时长 运动速度 延迟时间;</td><td>过度</td></tr><tr><td>box-shadow: 水平偏移 垂直偏移 模糊度 阴影扩展 阴影颜色 内外阴影;</td><td>盒子阴影，默认阴影为外阴影</td></tr><tr><td>text-shadow: 水平偏移 垂直偏移 模糊度 阴影颜色</td><td>文字阴影</td></tr><tr><td>animation:动画名称 动画时长 动画运动速度 延迟时间 执行次数 往返动画;</td><td>动画</td></tr><tr><td>flex: flex-grow flex-shrink flex-basis;</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue使用</title>
      <link href="2020/09/22/vue%E4%BD%BF%E7%94%A8/"/>
      <url>2020/09/22/vue%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h5 id="1-全局组件注册"><a href="#1-全局组件注册" class="headerlink" title="1.全局组件注册"></a>1.全局组件注册</h5><pre class=" language-javascr"><code class="language-javascr"><template id="comonent">    <h1>hello</h1></template>Vue.component("one",&#123;    template:"#component"&#125;)//Vue.component（"组件名","模板"），使用时直接将组件名作为标签使用。//直接使用标签需要在vue控制的范围内new vue(&#123;el:"#app"render:function(createElement)&#123;    return createElement("one");//替换原来的app为组件&#125;&#125;)</code></pre><h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h2><p>起风的日子里，抬头遥望远方，远方即使家乡</p><table><thead><tr><th>快捷键</th><th>作用</th><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+1</td><td>一阶标题</td><td>Ctrl+B</td><td>字体加粗</td></tr><tr><td>Ctrl+2</td><td>二阶标题</td><td>Ctrl+I</td><td>字体倾斜</td></tr><tr><td>Ctrl+3</td><td>三阶标题</td><td>Ctrl+U</td><td>下划线</td></tr><tr><td>Ctrl+4</td><td>四阶标题</td><td>Ctrl+Home</td><td>返回Typora顶部</td></tr><tr><td>Ctrl+5</td><td>五阶标题</td><td>Ctrl+End</td><td>返回Typora底部</td></tr><tr><td>Ctrl+6</td><td>六阶标题</td><td>Ctrl+T</td><td>创建表格</td></tr><tr><td>Ctrl+L</td><td>选中某句话</td><td>Ctrl+K</td><td>创建超链接</td></tr><tr><td>Ctrl+D</td><td>选中某个单词</td><td>Ctrl+F</td><td>搜索</td></tr><tr><td>Ctrl+E</td><td>选中相同格式的文字</td><td>Ctrl+H</td><td>搜索并替换</td></tr><tr><td>Alt+Shift+5</td><td>删除线</td><td>Ctrl+Shift+I</td><td>插入图片</td></tr><tr><td>ctrl+enter</td><td>表格增加一行</td><td></td><td></td></tr></tbody></table><h3 id="1-1元字符"><a href="#1-1元字符" class="headerlink" title="1.1元字符"></a>1.1元字符</h3><p><strong>“^”</strong> ：^会匹配行或者字符串的起始位置，有时还会匹配整个文档的起始位置。 </p><p> <strong>“$”</strong>  ：$会匹配行或字符串的结尾</p><p><strong>“\b”</strong> :不会消耗任何字符只匹配一个位置，常用于匹配单词边界 如 我想从字符串中”This is Regex”匹配单独的单词 “is” 正则就要写成 “\bis\b”  </p><p>　　  \b 不会匹配is 两边的字符，但它会识别is 两边是否为单词的边界 </p><p> <strong>“\d”</strong>: 匹配数字，</p><p> **”\w”**：匹配字母，数字，下划线.</p><p>**”\s”**：匹配空格 </p><p> <strong>“[abc]”</strong>: 字符组  匹配包含括号内元素的字符 </p><h3 id="1-2-几种反义"><a href="#1-2-几种反义" class="headerlink" title="1.2 几种反义"></a>1.2 几种反义</h3><p>   <strong>“**</strong>\W”**   匹配任意不是字母，数字，下划线 的字符</p><p>   <strong>“\S”</strong>   匹配任意不是空白符的字符</p><p>　<strong>“\D”</strong>  匹配任意非数字的字符</p><p>   <strong>“\B”</strong>  匹配不是单词开头或结束的位置</p><p>   <strong>“[^abc]”</strong>  匹配除了abc以外的任意字符</p><h3 id="1-3-量词"><a href="#1-3-量词" class="headerlink" title="1.3  量词"></a>1.3  量词</h3><p>　　先解释关于量词所涉及到的重要的三个概念</p><p>​    贪婪(贪心) 如”*”字符 贪婪量词会首先匹配整个字符串，尝试匹配时，它会选定尽可能多的内容，如果  失败则回退一个字符，然后再次尝试回退的过程就叫做回溯，它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。相比下面两种贪婪量词对资源的消耗是最大的，</p><p>   懒惰(勉强) 如 “?”  懒惰量词使用另一种方式匹配，它从目标的起始位置开始尝试匹配，每次检查一个字符，并寻找它要匹配的内容，如此循环直到字符结尾处。</p><p>   占有  如”+” 占有量词会覆盖事个目标字符串，然后尝试寻找匹配内容 ，但它只尝试一次，不会回溯，就好比先抓一把石头，然后从石头中挑出黄金</p><p>​     <strong>“*“(贪婪)</strong>   重复零次或更多</p><p>　　　  例如”aaaaaaaa” 匹配字符串中所有的a  正则： “a*”   会出到所有的字符”a”</p><p>​     <strong>“+”(懒惰)</strong>   重复一次或更多次</p><p>　　     例如”aaaaaaaa” 匹配字符串中所有的a  正则： “a+”  会取到字符中所有的a字符，  “a+”与”a*”不同在于”+”至少是一次而”*” 可以是0次，</p><p>　　     稍后会与”?”字符结合来体现这种区别</p><p>​     <strong>“?”(占有)</strong>   重复零次或一次</p><p>　　     例如”aaaaaaaa” 匹配字符串中的a 正则 ： “a?” 只会匹配一次，也就是结果只是单个字符a</p><p>　  <strong>“{n}”</strong>  重复n次</p><p>　  <strong>“{n,m}”</strong>  重复n到m次</p><p>​     <strong>“{n,}”</strong>  重复n次或更多次</p><h3 id="1-4懒惰限定符"><a href="#1-4懒惰限定符" class="headerlink" title="1.4懒惰限定符"></a>1.4懒惰限定符</h3><p>　　<strong>“*?”</strong>   重复任意次，但尽可能少重复 </p><p>　　    如 “acbacb”  正则  “a.*?b” 只会取到第一个”acb” 原本可以全部取到但加了限定符后，只会匹配尽可能少的字符 ，而”acbacb”最少字符的结果就是”acb” </p><p>　　<strong>“+?”</strong>  重复1次或更多次，但尽可能少重复</p><p>　　   与上面一样，只是至少要重复1次</p><p>　　<strong>“??”</strong>  重复0次或1次，但尽可能少重复</p><p>　　    如 “aaacb” 正则 “a.??b” 只会取到最后的三个字符”acb”</p><p>　　<strong>“{n,m}?”</strong>  重复n到m次，但尽可能少重复</p><p>​          如 “aaaaaaaa”  正则 “a{0,m}” 因为最少是0次所以取到结果为空</p><p>　　<strong>“{n,}?”</strong>    重复n次以上，但尽可能少重复</p><p>​          如 “aaaaaaa”  正则 “a{1,}” 最少是1次所以取到结果为 “a”</p><h3 id="1-5捕获分组"><a href="#1-5捕获分组" class="headerlink" title="1.5捕获分组"></a>1.5捕获分组</h3><p>　　先了解在正则中捕获分组的概念，其实就是一个括号内的内容 如 “(\d)\d” 而”(\d)”  这就是一个捕获分组，可以对捕获分组进行 后向引用 (如果后而有相同的内容则可以直接引用前面定义的捕获组，以简化表达式) 如(\d)\d\1  这里的”\1”就是对”(\d)”的后向引用</p><p>那捕获分组有什么用呢看个例子就知道了</p><p>如  “zery zery” 正则 \b(\w+)\b\s\1\b 所以这里的”\1”所捕获到的字符也是 与(\w+)一样的”zery”，为了让组名更有意义，组名是可以自定义名字的</p><p>“\b(?<name>\w+)\b\s\k<name>\b” 用”?<name>“就可以自定义组名了而要后向引用组时要记得写成 “\k<name>“;自定义组名后,捕获组中匹配到的值就会保存在定义的组名里</p><p>下面列出捕获分组常有的用法</p><p><strong>“(exp)”</strong>    匹配exp,并捕获文本到自动命名的组里</p><p><strong>“(?<name>exp)”</strong>   匹配exp,并捕获文本到名称为name的组里</p><p><strong>“(?:exp)”</strong>  匹配exp,不捕获匹配的文本，也不给此分组分配组号</p><p>以下为零宽断言</p><p><strong>“(?=exp)”</strong>  匹配exp前面的位置</p><p>　　如 “How are you doing” 正则”(?<txt>.+(?=ing))” 这里取ing前所有的字符，并定义了一个捕获分组名字为 “txt” 而”txt”这个组里的值为”How are you do”;</p><p><strong>“(?&lt;=exp)”</strong>  匹配exp后面的位置</p><p>　　如 “How are you doing” 正则”(?<txt>(?&lt;=How).+)” 这里取”How”之后所有的字符，并定义了一个捕获分组名字为 “txt” 而”txt”这个组里的值为” are you doing”;</p><p><strong>“(?!exp)”</strong>  匹配后面跟的不是exp的位置</p><p>　　如 “123abc” 正则 “\d{3}(?!\d)”匹配3位数字后非数字的结果</p><p><strong>“(?&lt;!exp)”</strong>  匹配前面不是exp的位置</p><p>　　如 “abc123 “ 正则 “(?&lt;![0-9])123” 匹配”123”前面是非数字的结果也可写成”(?!&lt;\d)123”</p><p> 　　  </p><h3 id="1-6正则实战"><a href="#1-6正则实战" class="headerlink" title="1.6正则实战"></a>1.6正则实战</h3><p>\1. 数字：^[0-9]*$</p><p>\2. n位的数字：^\d{n}$</p><p>\3. 至少n位的数字：^\d{n,}$</p><p>\4. m-n位的数字：^\d{m,n}$</p><p>\5. 零和非零开头的数字：^(0|[1-9][0-9]*)$</p><p>\6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</p><p>\7. 带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</p><p>\8. 正数、负数、和小数：^(-|+)?\d+(.\d+)?$</p><p>\9. 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</p><p>\10. 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</p><p>\11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]<em>){1,3}$ 或 ^+?[1-9][0-9]</em>$</p><p>\12. 非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</p><p>\13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$</p><p>\14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</p><p>\15. 非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$</p><p>\16. 非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$</p><p>\17. 正浮点数：^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$</p><p>\18. 负浮点数：^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$</p><p>\19. 浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$</p><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><p>\1. 汉字：^[\u4e00-\u9fa5]{0,}$</p><p>\2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</p><p>\3. 长度为3-20的所有字符：^.{3,20}$</p><p>\4. 由26个英文字母组成的字符串：^[A-Za-z]+$</p><p>\5. 由26个大写英文字母组成的字符串：^[A-Z]+$</p><p>\6. 由26个小写英文字母组成的字符串：^[a-z]+$</p><p>\7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</p><p>\8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</p><p>\9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</p><p>\10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</p><p>\11. 可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\x22]+ 12 禁止输入含有<del>的字符：[^</del>\x22]+</p><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><p>\1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</p><p>\2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p><p>\3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</p><p>\4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p><p>\5. 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</p><p>\6. 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</p><p>\7. 身份证号(15位、18位数字)：^\d{15}|\d{18}$</p><p>\8. 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p><p>\9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p><p>\10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p><p>\11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p><p>\12. 日期格式：^\d{4}-\d{1,2}-\d{1,2}</p><p>\13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p><p>\14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p><p>\15. 钱的输入格式：</p><p>\16. 1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</p><p>\17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p><p>\18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</p><p>\19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p><p>\20. 5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</p><p>\21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p><p>\22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p><p>23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</p><p>\24. 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><p>\25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</p><p>\26. 中文字符的正则表达式：[\u4e00-\u9fa5]</p><p>\27. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><p>\28. 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</p><p>\29. HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>\30. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>\31. 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</p><p>\32. 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</p><p>\33. IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)</p><p>\34. IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</p>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建blog</title>
      <link href="2020/09/20/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
      <url>2020/09/20/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>​    1.node.js(官网下载，直接下一步直到完成，使用命令node -v查看安装版本)</p><p>​    2.git（官网下载）</p><p>​    3.hexo(npm i hexo -g)</p><h3 id="2-生成blog项目"><a href="#2-生成blog项目" class="headerlink" title="2.生成blog项目"></a>2.生成blog项目</h3><p>​    1.创建空文件夹</p><p>​    2.选中该文件单机右键以powershell方式打开，执行命令hexo init初始化项目</p><p>​    3.执行hexo g生成项目</p><p>​    4.执行hexo s启动项目</p><h3 id="3-主题更换"><a href="#3-主题更换" class="headerlink" title="3.主题更换"></a>3.主题更换</h3><p>​    在themes文件下打开控制台执行 git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git%EF%BC%88%E6%9B%B4%E5%A4%9A%E7%9A%84%E4%B8%BB%E9%A2%98%E5%8F%AF%E8%BF%9B%E5%85%A5%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89">https://github.com/blinkfox/hexo-theme-matery.git（更多的主题可进入官网下载）</a></p><h3 id="4-文件创建"><a href="#4-文件创建" class="headerlink" title="4.文件创建"></a>4.文件创建</h3><p>​    每个主题下面都有多个界面，见面的显示需要配置对应的md文件进行显示</p><p>​    1.创建该文件</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>2.配置该文件</p><pre><code>title: &quot;分类&quot;date: 2020-09-13 17:06:27type: &quot;categories&quot;layout: &quot;categories&quot;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
